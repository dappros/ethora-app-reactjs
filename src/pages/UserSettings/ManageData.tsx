import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { IconInfo } from '../../components/Icons/IconInfo';
import { Loading } from '../../components/Loading';
import { SubmitModal } from '../../components/modal/SubmitModal';
import { deleteMe, getExportMyData } from '../../http';
import { useAppStore } from '../../store/useAppStore';

export function ManageData() {
  const [loading, setLoading] = useState(false);
  const [warning, setWarning] = useState(false);
  const navigate = useNavigate();
  const doClearState = useAppStore((s) => s.doClearState);

  const onDownloadMyData = () => {
    setLoading(true);
    getExportMyData()
      .then((response) => {
        const binaryData = response.data;
        console.log(binaryData);
        const blob = new Blob([binaryData], { type: 'text/plain' });

        // Create a temporary URL for the Blob
        const url = URL.createObjectURL(blob);

        // Create a temporary link element
        const a = document.createElement('a');
        a.href = url;
        a.download = 'mydata.json';

        // Append the link to the document, click it, and then remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        // Release the URL once done
        URL.revokeObjectURL(url);
      })
      .catch(() => toast.error('Error'))
      .finally(() => setLoading(false));
  };

  const onDelete = () => {
    setLoading(true);
    deleteMe()
      .then(() => {
        toast.success('Success');
        doClearState();
        localStorage.removeItem('token-538');
        localStorage.removeItem('lastPath');
        navigate('/login');
      })
      .finally(() => setLoading(false));
  };

  return (
    <div className="md:ml-4">
      <p className="font-sans text-regular font-semibold mb-2">Download your data</p>
      <div className="text-[#8C8C8C] font-sans text-[12px] mb-4">
        You own your data. Tap the button below to download a copy of your data
      </div>
      <button className="mb-8 rounded-xl hover:bg-brand-hover border-brand-500 border max-w-[416px] w-full text-center text-brand-500 p-2" onClick={onDownloadMyData}>
        Download My Data
      </button>
      <div className="font-sans text-regular font-semibold mb-2">Delete your data</div>
      <div className="text-[#8C8C8C] font-sans text-[12px] mb-4">
        Use this only if you want to permanently delete your account & data from
        our system.
      </div>
      <div className="bg-[#F3F6FC] p-2 rounded-lg grid grid-cols-[16px,_1fr] gap-2 font-sans text-[12px] mb-4">
        <IconInfo />
        <p>
          Due to the immutable nature of distributed ledger technology, network
          nodes operated by the community may still retain historical
          transactions generated by your account, however your personally
          identifiable information such as your name, e-mail, your key-value
          storage etc will be removed. Any of your digital assets will be lost.
        </p>
      </div>
      <button 
        className="mb-8 rounded-xl hover:bg-brand-hover border-red-600 border max-w-[416px] w-full text-center text-red-600 p-2" 
        onClick={() => setWarning(true)}
      >
        Delete My Account
      </button>
      {warning && (
        <SubmitModal onClose={() => setWarning(false)}>
          <p className="font-varela text-[24px] text-center mb-8">Delete Account</p>
          <p className="font-sans text-[14px] mb-8">
            {`Are you sure you want to delete your all data from the platform?`}
          </p>
          <div className="flex gap-8">
            <button
              onClick={() => setWarning(false)}
              className="rounded-xl border-brand-500 border max-w-[416px] w-full text-center text-brand-500 p-2"
            >
              Cancel
            </button>
            <button
              onClick={() => onDelete()}
              className="rounded-xl bg-red-600 border max-w-[416px] w-full text-center text-white p-2"
            >
              Submit
            </button>
          </div>
        </SubmitModal>
      )}
      {loading && <Loading />}
    </div>
  );
}
